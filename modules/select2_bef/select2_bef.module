<?php

/**
 * @file
 * Basic module file.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\select2_bef\Controller\Select2BefFormStaticController as FormController;

/**
 * Implements hook_help().
 */
function select2_bef_help($route_name) {
  switch ($route_name) {
    case 'help.page.select2_bef':
      $output = 'Provides an integration between Select2 and Better Exposed Filters';
      return $output;
  }
}

/**
 * Implements hook_better_exposed_filters_display_options_alter().
 */
function select2_bef_better_exposed_filters_display_options_alter(&$display_options, $filter) {
  /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
  // Handle fields only, e.g. prevent title, status
  // and other properties being processed.
  if (stripos($filter->table, 'field_') !== FALSE && $filter->table != 'node_field_data') {

    $entity_type = $filter->getEntityType();
    // Build field's name using it's database table name.

    $field_name = str_replace($entity_type . '__', '', $filter->table);
    /** @var \Drupal\Core\Entity\EntityFieldManager $service */

    $service = \Drupal::service('entity_field.manager');

    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $definition */
    $definition = $service->getFieldStorageDefinitions($entity_type)[$field_name];

    if ($definition instanceof FieldStorageDefinitionInterface) {
      // Attach an appropriate option for each field type
      // allowed to specific field's widget.
      $type = $definition->getType();
      if (in_array($type, \Drupal::service('plugin.manager.field.widget')->getDefinition('select2boxes_autocomplete_list')['field_types'])) {
        $display_options['select2boxes_autocomplete_list'] = t('Select2 boxes');
      }
      if (in_array($type, \Drupal::service('plugin.manager.field.widget')->getDefinition('select2boxes_autocomplete_multi')['field_types'])) {
        $display_options['select2boxes_autocomplete_multi'] = t('Select2 boxes (Multiple values)');
      }
      if (in_array($type, \Drupal::service('plugin.manager.field.widget')->getDefinition('select2boxes_autocomplete_single')['field_types'])) {
        $display_options['select2boxes_autocomplete_single'] = t('Select2 boxes (Single value)');
      }
    }
  }

  // Additionally allow "langcode" and "content_translation_source" fields
  // to use "Select2 boxes" widget.
  elseif (in_array($filter->field, ['langcode', 'content_translation_source'])) {
    $display_options['select2boxes_autocomplete_list'] = t('Select2 boxes');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function select2_bef_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\views\ViewExecutable $view */
  // Prepare required variables.
  $view    = $form_state->get('view');
  $options = $view->display_handler->getOption('exposed_form')['options'];
  $bef     = isset($options['bef']) ? $options['bef'] : NULL;
  if (!empty($bef)) {
    $libraries = &$form['#attached']['library'];
    $children = Element::children($form);
    foreach ($children as $key) {
      // Handle fields and language properties only.
      if (FormController::isValidFormKey($key)) {
        // Ensure it is "BEF" filter.
        if (isset($bef[$key])) {
          // Handle each filter types with different way.
          if ($bef[$key]['configuration']['plugin_id'] == 'select2boxes_autocomplete_list') {
            // Handle list fields(integer, float, string etc.).
            FormController::handleList($form, $view->filter[$key], $libraries, $key, $bef);
          }
          elseif ($bef[$key]['configuration']['plugin_id'] == 'select2boxes_autocomplete_multi') {
            // Handle multi-value autocomplete fields.
            FormController::handleMultiAutocomplete($form, $libraries, $key);
          }
          elseif ($bef[$key]['configuration']['plugin_id'] == 'select2boxes_autocomplete_single') {
            // Handle single-value autocomplete fields.
            FormController::handleSingleAutocomplete($form, $libraries, $key, $bef);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function select2_bef_form_views_ui_config_item_extra_form_alter(&$form) {
  // Collect required data using the route match object.
  $params = \Drupal::routeMatch()->getParameters();
  // Current field name.
  $field_id = $params->get('id');
  // Current view's display ID.
  $display_id = $params->get('display_id');
  // View's displays.
  $displays = $params->get('view')->get('storage')->get('display');

  // Fetch correct display to work with it's options.
  $display_options = (isset($displays[$display_id]['display_options']['exposed_form']))
    ? $displays[$display_id]['display_options']
    : $displays['default']['display_options'];

  // Reset taxonomy term filters extra settings
  // if the Select2 widget was specified in BEF settings for this field.
  if (!empty($display_options) && $display_options['exposed_form']['type'] == 'bef') {
    FormController::resetTaxonomyExtraSetting($display_options['exposed_form']['options']['bef'], $field_id, $form);
  }
}
